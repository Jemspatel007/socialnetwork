AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for VPC with Public and Private Subnets, RDS instance, and NAT Gateway for Private Subnet 1.

Resources:
  # Step 1: VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Step 2: Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Step 3: Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Step 4: Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Associate Public Subnets with Public Route Table
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet3

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet4

  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.7.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet5

  PrivateSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.8.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet6

  # Step 6: NAT Gateway Elastic IP
  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MyElasticIP

  # Step 7: NAT Gateway
  MyNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: MyNATGateway

  # Step 8: Private Route Table for Private Subnet 1
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNATGateway

  # Associate Private Subnet 1 with Private Route Table
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Associate Private Subnet 2 with Private Route Table
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  
  # Associate Private Subnet 3 with Private Route Table
  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  # Associate Private Subnet 4 with Private Route Table
  PrivateSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups for Frontend, Backend, and Database
  FrontendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS access for Frontend
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref FrontendALBSG
      Tags:
        - Key: Name
          Value: FrontendSG

  BackendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from Frontend to Backend
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref BackendALBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref FrontendSG
      Tags:
        - Key: Name
          Value: BackendSG

  DatabaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from Backend to Database
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref BackendSG
      Tags:
        - Key: Name
          Value: DatabaseSG

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS in Private Subnet 1 and Private Subnet 2
      SubnetIds:
        - !Ref PrivateSubnet5
        - !Ref PrivateSubnet6
      Tags:
        - Key: Name
          Value: MyDBSubnetGroup
  
  # Step 12: RDS Instance
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0.35
      DBInstanceIdentifier: mydatabase-instance
      MasterUsername: admin
      MasterUserPassword: admin123
      DBName: MyDatabase
      VPCSecurityGroups:
        - !Ref DatabaseSG
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      MultiAZ: true
      Port: 3306
      AllocatedStorage: 20
      StorageType: gp2

  # Load Balancer for Backend
  BackendALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Backend Load Balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: BackendALBSG

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: BackendTargetGroup
      Protocol: HTTP
      Port: 8000
      VpcId: !Ref MyVPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8000
      HealthCheckPath: /
      Tags:
        - Key: Name
          Value: BackendTargetGroup

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: BackendLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref BackendALBSG
      Tags:
        - Key: Name
          Value: BackendLoadBalancer

  # Step 1: Frontend Load Balancer Security Group
  FrontendALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Frontend Load Balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: FrontendALBSG

  # Step 2: Frontend Target Group
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: FrontendTargetGroup
      Protocol: HTTP
      Port: 80
      VpcId: !Ref MyVPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /
      Tags:
        - Key: Name
          Value: FrontendTargetGroup

  # Step 3: Frontend Listener
  FrontendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref FrontendLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  # Step 4: Frontend Load Balancer (ALB)
  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: FrontendLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref FrontendALBSG
      Tags:
        - Key: Name
          Value: FrontendLoadBalancer

  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: BackendLoadBalancer
    Properties:
      LaunchTemplateName: FrontendLaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: jems
        SecurityGroupIds:
          - !Ref FrontendSG
        ImageId: ami-0ba9883b710b05ac6
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            exec > /var/log/user-data.log 2>&1

            echo "Updating packages..."
            sudo yum update -y

            echo "Installing Docker..."
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user

            echo "Installing Git..."
            sudo yum install -y git

            echo "Cloning the repository..."
            git clone https://github.com/Jemspatel007/socialnetwork.git

            echo "Navigating step by step..."
            cd socialnetwork
            echo "Inside socialNetwork..."
            cd SocialNetwork
            echo "Inside SocialNetwork..."
            cd Client
            echo "Inside frontend directory."

            echo "Building the Docker image with environment variable..."
            docker build \
              --build-arg REACT_APP_API_BASE_URL=http://${BackendLoadBalancer.DNSName} \
              -t jems007patel/frontend-socialnetwork .

            echo "Running the Docker container..."
            docker run -d -p 80:80 --name frontend jems007patel/frontend-socialnetwork

            echo "Setup completed successfully."

  # Frontend Auto Scaling Group
  FrontendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: MyRDSInstance
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: FrontendInstance
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref FrontendTargetGroup

  # Backend Launch Template
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: BackendLaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: jems
        SecurityGroupIds:
          - !Ref BackendSG
        ImageId: ami-0ba9883b710b05ac6
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            docker pull jems007patel/backend-socialnetwork
            docker run -d -p 8000:8000 \
              -e DB_HOST=${MyRDSInstance.Endpoint.Address} \
              -e DB_USER=admin \
              -e DB_PASSWORD=admin123 \
              --name backend jems007patel/backend-socialnetwork
  
  # Backend Auto Scaling Group
  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet3
        - !Ref PrivateSubnet4
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: BackendInstance
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref BackendTargetGroup
        
# Create a Secret in Secrets Manager
  DocumentDBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSCredentials
      Description: "Secrets for DocumentDB username and password"
      SecretString: !Sub |
        {
          "username": "admin",
          "password": "admin123"
        }

Outputs:
  BackendLoadBalancerDNS:
    Description: DNS name of the Backend Load Balancer
    Value: !GetAtt BackendLoadBalancer.DNSName