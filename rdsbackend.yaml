AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create RDS in default VPC and test backend using EC2 instance.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    Default: jems

  DefaultVPCId:
    Description: Default VPC ID
    Type: AWS::EC2::VPC::Id
    Default: vpc-0c35e97d6954acc04

  DefaultSubnetIDs:
    Description: List of Subnets in the Default VPC
    Type: CommaDelimitedList
    Default: subnet-01ffaba6578e0f1bf,subnet-099e9ae9a9633ed7a,subnet-026b76186b31782a0,subnet-013be782033b3d951,subnet-070c6b43b846ef3f3,subnet-031e0b4fea815712e

  LatestAmazonLinuxAMI:
    Description: Latest Amazon Linux 2 AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  MyDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Default VPC subnets for RDS"
      SubnetIds: !Ref DefaultSubnetIDs

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      DBName: MyDatabase
      Engine: MySQL
      EngineVersion: "8.0"
      MasterUsername: admin
      MasterUserPassword: "admin123"
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !GetAtt MySecurityGroup.GroupId
      DBSubnetGroupName: !Ref MyDBSubnetGroup

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow EC2 and RDS Access"
      VpcId: !Ref DefaultVPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0  # Adjust to restrict access to specific IPs
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # SSH Access (Restrict as needed)
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0  # Backend application port

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt MySecurityGroup.GroupId
      SubnetId: !Select [0, !Ref DefaultSubnetIDs]
      ImageId: !Ref LatestAmazonLinuxAMI
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            # Update and Install Docker
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user

            # Pulling the Docker backend image
            docker pull jems007patel/backend-socialnetwork

            # Running the Docker container for backend with environment variables
            docker run -d -p 8000:8000 \
              -e DB_HOST=${MyRDSInstance.Endpoint.Address} \
              -e DB_USER=admin \
              -e DB_PASSWORD=admin123 \
              --name backend jems007patel/backend-socialnetwork
    DependsOn: MyRDSInstance

Outputs:
  RDSInstanceEndpoint:
    Description: The endpoint of the RDS instance
    Value: !GetAtt MyRDSInstance.Endpoint.Address
    Export:
      Name: RDSInstanceEndpoint

  EC2InstancePublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
