AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for VPC with Public and Private Subnets, RDS instance, and NAT Gateway for Private Subnet 1.

Resources:
  # Step 1: VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Step 2: Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Step 3: Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Route Table Association for PublicSubnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Step 4: Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  # Step 5: Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [2, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  # Step 6: Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Step 7: NAT Gateway Elastic IP
  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MyElasticIP

  # Step 8: NAT Gateway
  MyNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: MyNATGateway

  # Step 9: Private Route Table for Private Subnet 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  # Associate Private Subnet 1 with Private Route Table
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  # Add NAT Gateway Route to Private Route Table 1
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNATGateway

  # Step 10: Private Route Table for Private Subnet 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  # Associate Private Subnet 2 with Private Route Table
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Step 9: Frontend Security Group
  FrontendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS access for Frontend
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: FrontendSG

  # Step 10: Backend Security Group
  BackendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from Frontend to Backend
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref BackendALBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref FrontendSG
      Tags:
        - Key: Name
          Value: BackendSG

  # Step 11: Database Security Group
  DatabaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from Backend to Database
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref BackendSG
      Tags:
        - Key: Name
          Value: DatabaseSG

  # Step 12: RDS Instance
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0.35
      DBInstanceIdentifier: mydatabase-instance
      MasterUsername: admin
      MasterUserPassword: admin123
      DBName: MyDatabase
      VPCSecurityGroups:
        - !Ref DatabaseSG
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      MultiAZ: false
      Port: 3306
      AllocatedStorage: 20
      StorageType: gp2

  # Step 13: DB Subnet Group for RDS
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS in Private Subnet 1 and Private Subnet 2
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: MyDBSubnetGroup

  # Load Balancer for Backend
  BackendALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Backend Load Balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: BackendALBSG

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: BackendTargetGroup
      Protocol: HTTP
      Port: 8000
      VpcId: !Ref MyVPC
      TargetType: instance
      Targets:
        - Id: !Ref BackendEC2Instance
          Port: 8000
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8000
      HealthCheckPath: /
      Tags:
        - Key: Name
          Value: BackendTargetGroup

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: BackendLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref BackendALBSG
      Tags:
        - Key: Name
          Value: BackendLoadBalancer

  FrontendEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - BackendListener
      - BackendLoadBalancer
    Properties:
      InstanceType: t2.micro
      KeyName: jems
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref FrontendSG
      ImageId: ami-0ba9883b710b05ac6
      Tags:
        - Key: Name
          Value: FrontendEC2Instance
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y docker  
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          docker pull jems007patel/frontend-socialnetwork
          docker run -d -p 80:80 \
            -e REACT_APP_API_BASE_URL=http://$(echo ${BackendLoadBalancer.DNSName} | sed 's/^https:/http:/') \
            --name frontend jems007patel/frontend-socialnetwork

  BackendEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: MyRDSInstance
    Properties:
      InstanceType: t2.micro
      KeyName: jems
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref BackendSG
      ImageId: ami-0ba9883b710b05ac6
      Tags:
        - Key: Name
          Value: BackendEC2Instance
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          docker pull jems007patel/backend-socialnetwork
          docker run -d -p 8000:8000 \
            -e DB_HOST=${MyRDSInstance.Endpoint.Address} \
            -e DB_USER=admin \
            -e DB_PASSWORD=admin123 \
            --name backend jems007patel/backend-socialnetwork

  # Frontend Launch Template
  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: FrontendLaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: jems
        SecurityGroupIds:
          - !Ref FrontendSG
        ImageId: ami-0ba9883b710b05ac6
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y docker  
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            docker pull jems007patel/frontend-socialnetwork
            docker run -d -p 80:80 \
              -e REACT_APP_API_BASE_URL=http://$(echo ${BackendLoadBalancer.DNSName} | sed 's/^https:/http:/') \
              --name frontend jems007patel/frontend-socialnetwork

  # Frontend Auto Scaling Group
  FrontendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: FrontendInstance
          PropagateAtLaunch: true

  # Backend Launch Template
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: BackendLaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: jems
        SecurityGroupIds:
          - !Ref BackendSG
        ImageId: ami-0ba9883b710b05ac6
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            docker pull jems007patel/backend-socialnetwork
            docker run -d -p 8000:8000 \
              -e DB_HOST=${MyRDSInstance.Endpoint.Address} \
              -e DB_USER=admin \
              -e DB_PASSWORD=admin123 \
              --name backend jems007patel/backend-socialnetwork

  # Backend Auto Scaling Group
  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: BackendInstance
          PropagateAtLaunch: true


Outputs:
  BackendLoadBalancerDNS:
    Description: DNS name of the Backend Load Balancer
    Value: !GetAtt BackendLoadBalancer.DNSName

  FrontendPublicIP:
    Description: Public IP address of Frontend EC2
    Value: !GetAtt FrontendEC2Instance.PublicIp